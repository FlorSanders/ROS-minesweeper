#!/usr/bin/env python

from my_python_package.mine_detection import *



# Run the open loop driver if this script is called
if __name__  == "__main__":
    # Helper library that parses command line option
    parser = argparse.ArgumentParser(description = 'Minesweeper controller for our robot')
    parser.add_argument('strategy', 
        help=(f"Which minesweeping strategy you want to use, Options: [{'/'.join(strategies.keys())}]"),
        nargs=1,
        type=str
    )
    parser.add_argument('--speed',
        help='Linear speed of the robot when moving',
        nargs='?',
        default=0.5,
        type=float
    )
    parser.add_argument('--angularspeed',
        help='Angular speed of the robot when turning',
        nargs='?',
        default=1.0,
        type=float
    )
    parser.add_argument('--detectionthreshold',
        help='Distance threshold fr when the robot detects an obstacle in its route',
        nargs='?',
        default=0.5,
        type=float
    )
    parser.add_argument('--pubrate',
        help='Delay in seconds between instructions sent to the robot',
        nargs='?',
        default=0.1,
        type=float
    )
    parser.add_argument('--duration',
        help='Default step duration the robot moves for',
        nargs='?',
        default=0.25,
        type=float
    )
    parser.add_argument('--angle',
        help='Default angle the robot rotates by',
        nargs='?',
        default=np.pi/2,
        type=float
    )
    parser.add_argument('--distance',
        help='Default distance the robot moves by',
        nargs='?',
        default=1.0,
        type=float
    )
    parser.add_argument('--debug',
        help='Writes debug messages using print() when added',
        action='store_true'
    )

    # Parsing sys.argv
    args = parser.parse_args()
    argsdict = vars(args)
    strategy = argsdict.pop('strategy', None)[0]

    if args.debug:
        print(args)
    
    # Launch the controller
    try:
        if strategy in list(strategies.keys()):
            controller = strategies[strategy](**argsdict)
            controller.start_ros()
            controller.move()
        else:
            parser.print_help()
    except ros.ROSInterruptException:
        # We do this to avoid accidentally continuing to run code after the module is shut down
        pass